import 'dart:io';import 'dart:typed_data';import 'package:dash_chat_2/dash_chat_2.dart';import 'package:flutter/material.dart';import 'package:flutter_gemini/flutter_gemini.dart';import 'package:google_fonts/google_fonts.dart';import 'package:image_picker/image_picker.dart';class DashboardScreen extends StatefulWidget {  const DashboardScreen({super.key});  @override  State<DashboardScreen> createState() => _DashboardScreenState();}class _DashboardScreenState extends State<DashboardScreen> {  // bool isLoading = false;  Gemini gemini = Gemini.instance;  List<ChatMessage> messages = [];  ChatUser currentUser = ChatUser(id: "0",firstName: "User",profileImage:"https://static.vecteezy.com/system/resources/previews/005/005/788/original/user-icon-in-trendy-flat-style-isolated-on-grey-background-user-symbol-for-your-web-site-design-logo-app-ui-illustration-eps10-free-vector.jpg");  ChatUser geminiUser = ChatUser(id: "1",firstName: "Gemini",profileImage:"https://hugeicons.com/api/png?uuid=google-gemini-solid-rounded");  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        surfaceTintColor: Colors.white,        title:Text('ChatBot AI',style: GoogleFonts.dmSans(          textStyle:TextStyle(            color: Colors.black,            fontSize: 20,            fontWeight: FontWeight.w500,          )        ),),        centerTitle: true,        actions: [          IconButton(            tooltip: "New Page",              onPressed: (){            setState(() {              messages = [];            });          }, icon: Icon(Icons.add,color: Colors.black,size: 28,))        ],      ),      body: _buildUI(),    );  }  Widget _buildUI(){    return DashChat(        currentUser: currentUser,        onSend: onSend,        messages: messages,      inputOptions: InputOptions(        alwaysShowSend: true,          inputMaxLines: 2,          sendButtonBuilder: (Function()? onSend) {            return IconButton(              icon:const Icon(Icons.send, color: Colors.black), // Set your desired color here              onPressed: onSend,            );          },        leading: [          IconButton(              onPressed:(){                sendMediaImage();              },              icon: const Icon(Icons.image,color:Colors.black)          )        ],        inputDecoration: InputDecoration(          hintText: "Search...",          filled: true,          fillColor: Colors.grey.shade300,          contentPadding: const EdgeInsets.only(left: 15,top: 3,bottom: 3,right: 15),          enabledBorder: const OutlineInputBorder(            borderSide: BorderSide(color: Colors.transparent,width: 0),            borderRadius: BorderRadius.all(Radius.circular(25))          ),            focusedBorder: const OutlineInputBorder(                borderSide: BorderSide(color: Colors.transparent,width: 0),                borderRadius: BorderRadius.all(Radius.circular(25))            ),        ),      ),      messageOptions: MessageOptions(        messageTextBuilder: (message, previousMessage, nextMessage) {          bool msg = message.user.id == '1';          return Text(            message.text,            style: GoogleFonts.openSans(              textStyle:TextStyle(                fontSize: 15,                color:msg? Colors.black:Colors.white,                fontWeight: FontWeight.normal              ),            )          );        },        messageDecorationBuilder:(message, previousMessage, nextMessage) {          bool msg = message.user.id == '1';          return BoxDecoration(            border: msg? Border.all(width: 1,color: Colors.black54,):null,            borderRadius: msg?              const BorderRadius.only(topLeft: Radius.circular(0), topRight: Radius.circular(30), bottomRight: Radius.circular(30), bottomLeft: Radius.circular(30))            : const BorderRadius.only(topLeft: Radius.circular(30), topRight: Radius.circular(30), bottomRight: Radius.circular(0), bottomLeft: Radius.circular(30))            ,            color: msg?Colors.white:Colors.black87,          );        },        textColor: Colors.black,        currentUserTextColor: Colors.white,        currentUserContainerColor: Colors.black87,        showCurrentUserAvatar: false,        containerColor: Colors.grey.shade100,      ),    );  }  void onSend(ChatMessage chatMessage){    setState(() {      messages = [chatMessage, ...messages];    });    try{      String question = chatMessage.text;      List<Uint8List>? images;      if(chatMessage.medias?.isNotEmpty?? false){        images = [          File(chatMessage.medias!.first.url).readAsBytesSync(),        ];      }      gemini.streamGenerateContent(question,images: images).listen((event) {        ChatMessage? lastMessage = messages.firstOrNull;        if(lastMessage != null && lastMessage.user == geminiUser){          lastMessage = messages.removeAt(0);          String response = event.content?.parts?.fold("", (previous, current) => "$previous${current.text}")??"";          lastMessage.text += response.replaceAll("*",'').replaceAll("**", "");          setState(() {            messages = [lastMessage!, ...messages];          });        }else{          String response = event.content?.parts?.fold("", (previous, current) => "$previous${current.text}")??"";          ChatMessage message = ChatMessage(              user:geminiUser,              createdAt: DateTime.now(),            text: response.replaceAll("*", "")          );          setState(() {            messages = [message, ...messages];          });        }      });    }catch(e){      print(e.toString());    }  }  void sendMediaImage()async{    ImagePicker picker = ImagePicker();    XFile? file = await picker.pickImage(source: ImageSource.gallery);    ChatMessage chatMessage = ChatMessage(user:currentUser, createdAt: DateTime.now(),text: "Explain this image", medias: [      ChatMedia(url: file!.path, fileName: "", type: MediaType.image)    ]);    onSend(chatMessage);  }}